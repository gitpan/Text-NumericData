#!/usr/bin/env perl

use Text::NumericData::App::txdfilter;

my $app = Text::NumericData::App::txdfilter->new();
exit $app->run();

__END__

=head1 NAME

txdfilter - filter textual data files


=head1 DESCRIPTION

This program filters/transforms textual data files (pipe operation) concering the syntax and header stuff. The data itself is preserved. Any Parameters after options are file title and data column titles (overriding the named parameters).

=head1 PARAMETERS

These are the general rules for specifying parameters to this program:

	txdfilter -s -xyz -s=value --long --long=value [--] [files/stuff]

You mention the parameters/switches you want to change in any order or even multiple times (they are processed in the oder given, later operations overriding/extending earlier settings.
An only mentioned short/long name (no "=value") means setting to 1, which is true in the logical sense. Also, prepending + instead of the usual - negates this, setting the value to 0 (false).
Specifying "-s" and "--long" is the same as "-s=1" and "--long=1", while "+s" and "++long" is the sames as "-s=0" and "--long=0".

There are also different operators than just "=" available, notably ".=", "+=", "-=", "*=" and "/=" for concatenation / appending array/hash elements and scalar arithmetic operations on the value. Arrays are appended to via "array.=element", hash elements are set via "hash.=name=value".


The available parameters are these, default values (in Perl-compatible syntax) at the time of generating this document following the long/short names:

=over 2

=item B<black> (scalar)

	0

ignore whitespace at beginning and end of line (disables strict mode) (from Text::NumericData)

=item B<coltitles>, B<i> (array)

	[]

new column titles (as in "title1","title2","title3")

=item B<comchar> (scalar)

	undef

comment character (if not set, deduce from data or use #) (from Text::NumericData)

=item B<comment>, B<C> (array)

	[]

comment to include between file title and column titles, lines in array

=item B<comregex> (scalar)

	'[#%]*[^\\S\\015\\012]*'

regex for matching comments (from Text::NumericData)

=item B<config>, B<I> (array)

	[]

Which configfile(s) to use (overriding automatic search in likely paths);
special: just -I or --config causes printing a current config file to STDOUT

=item B<data> (scalar)

	1

include the data in printout

=item B<delaftercom>, B<D> (scalar)

	0

delete any comment lines after data

=item B<empty> (scalar)

	0

treat empty lines as empty data sets, preserving them in output (from Text::NumericData)

=item B<fdex>, B<F> (scalar)

	''

regex for first data line (alterative to lhex)

=item B<fill> (scalar)

	undef

fill value for undefined data (from Text::NumericData)

=item B<head> (scalar)

	1

include the header in printout

=item B<headlines>, B<H> (scalar)

	undef

use this fixed number of lines as header

=item B<help>, B<h> (scalar)

	0

show the help message; 1: normal help, >1: more help; "par": help for paramter "par" only


Additional fun with negative values, optionally followed by comma-separated list of parameter names:
-1: list par names, -2: list one line per name, -3: -2 without builtins, -10: dump values (Perl style), -11: dump values (lines), -100: print POD.

=item B<history> (scalar)

	0

keep old title(s) lines as historic comments (writing new overall title before, new column titles below), otherwise replace them

=item B<lhex>, B<L> (scalar)

	''

regex for last header line (alternative to fdex)

=item B<lineend> (scalar)

	undef

line ending to use: (DOS, MAC, UNIX or be explicit if you can, taken from data if undefined, finally resorting to UNIX) (from Text::NumericData)

=item B<modtitles>, B<m> (hash)

	{}

modify existing titles... hash with column indices as key, in Perl: (1=>"NeSpalte",4=>"AndereSpalte")

=item B<newhead>, B<n> (scalar)

	0

make completely new header

=item B<numformat>, B<N> (array)

	[]

printf formats to use (if there is no "%" present at all, one will be prepended) (from Text::NumericData)

=item B<numregex> (scalar)

	'[\\+\\-]?\\d*\\.?\\d*[eE]?\\+?\\-?\\d*'

regex for matching numbers (from Text::NumericData)

=item B<origin>, B<o> (scalar)

	0

create Origin-friendly format with tab separation and coltitles as only header line and NO comment character, triggers also quote=0 and delaftercom=1

=item B<outsep> (scalar)

	undef

use this separator for output (leave undefined to use input separator, fallback to TAB) (from Text::NumericData)

=item B<quote> (scalar)

	undef

quote titles (from Text::NumericData)

=item B<quotechar> (scalar)

	undef

quote character to use (derived from input or ") (from Text::NumericData)

=item B<separator> (scalar)

	undef

use this separator for input (otherwise deduce from data; TAB is another way to say "tabulator", fallback is	) (from Text::NumericData)

=item B<strict>, B<S> (scalar)

	0

strictly split data lines at configured separator (otherwise more fuzzy logic is involved) (from Text::NumericData)

=item B<text>, B<T> (scalar)

	1

allow text as data (not first column) (from Text::NumericData)

=item B<title>, B<t> (scalar)

	undef

new title

=item B<touchdata> (scalar)

	1

touch the data lines (otherwise just copy them)

=item B<touchhead> (scalar)

	1

touch the header (otherwise just copy)

=item B<version> (scalar)

	0

print out the program version

=back

=head1 AUTHOR

Thomas Orgis <thomas@orgis.org>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2005-2013 Thomas Orgis, Free Software licensed under the same terms as Perl 5.10

=cut
